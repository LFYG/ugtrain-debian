warzone2100

# Warzone 2100 2.3.8, Gentoo Linux, 64 bit
#
# +9 Trainer: indestructible droids, experienced droids, fast droids,
# indestructible buildings, build buildings fast, build droids fast,
# research fast, power, hide using cheats
#
# https://www.youtube.com/watch?v=1GcppQNpdTc
#
# works adapted with 2.3.8 and 2.3.9
# works adapted with and without PIE
# doesn't work with >= 3.0, see warzone2100-64.conf
#
# Here we hook on dynamic memory (C++ constructors) -
# multiple Droid and Structure objects. Also static memory
# is included.


# The body points are easy to find in memory.

# Usually we have player ID 0. The AI has 6 and 7 in mission 1.
define PLAYER_ID_CHECK checko 0x40 u8 e 0
# The body points shouldn't be too low (avoid unexpected behavior).
define BODY_CHECK check 0x5c u16 g 2


# Found the body points of an own MG Viper droid with scanmem
# by using 'snapshot', shooting at it, using '<' and '='.
# Found out that it has 205 body points initially like it is
# displayed in the droid design dialog.
#
# The game starts with 47 droids of which only 7 are our
# own droids. The memory object dump ('>' key during run)
# and the tool 'ugsimfind' are very useful here.

dynmemstart Droid 1040 0x56c0ba 0x8

# Increase the maximum body points
DMaxBody 0x1d4 u16 l 10000 1,0 a
check this u16 g 2
BODY_CHECK
PLAYER_ID_CHECK

# Read the max. 'body' value from 'originalBody' value
# to avoid nasty assert failed messages.
DBody 0x5c u16 l DMaxBody 1,0 a
BODY_CHECK

# Experience: From zero to hero!
DKills 0x1d8 f32 l 1024.0 2,0 a
BODY_CHECK
PLAYER_ID_CHECK

# Droids must be fast! Pimp my ride!
# (MG Viper starts with 2600.)
DWeight 0x1cc u32 g 2000 3,0 a
BODY_CHECK
PLAYER_ID_CHECK

# (Viper starts with 199.)
DSpeed 0x1d0 u32 l 1000 3,0 a
BODY_CHECK

dynmemend


# Structure Stats (pointer target)
#
# The size is only important for the dump.
# But we know it from watching the pointers.
# There is a big allocation for all structure
# stats at once. They are contiguous in memory.
# Subtract the power gen ptr from the factory ptr.

ptrmemstart StructStats 160

# Used for checks, don't deactivate!
SType 0x10 u8 watch

SMaxBody 0x34 u16 watch

# Used for value from address, don't deactivate!
SMaxBuild 0x28 u16 watch

ptrmemend


# Structure Functionality (union pointer target)
#
# The size is only important for the dump.
# But we know it from pointer-to-heap
# discovery. This is allocated with calloc().

ptrmemstart StructFunct 64

# Factory (Type 1, 16, 17 - Droid, Cyborg, VTOL)

# Build subject
FSubjPtr 0x8 u64 watch

# Time to build - Build very fast!
FBuildTime 0x14 u32 g 0 6,0 a
check SType u8 e 1 e 16 e 17

# Use max. build points per production cycle.
# Only cheated as this is visible.
# a little less than 255 for getting visible factory modules
FBuildPts 0x3 u8 l 200 6,0 a
check SType u8 e 1 e 16 e 17

# Power accrued - Build even faster!
FPowerPts 0x4 u32 l 2000 6,0 a
check SType u8 e 1 e 16 e 17


# Research Facility (Type 10)

# Research subject
RSubjPtr 0x0 u64 watch

# Research points per cycle - Research very fast!
# This is visible (Starts with 14).
RResPts 0x10 u32 l 60000 7,0 a
check SType u8 e 10

# Power accrued - Research even faster!
RPowerPts 0x20 u32 l 2000 d,x a
check SType u8 e 10

ptrmemend


# Found the body points of the command center with scanmem
# by using 'snapshot', shooting at it, using '<' and '='.
# Found out that it has 500 body points initially.

dynmemstart Structure 352 0x56c0aa 0x8

# Get structure type, max. body and max. build points
SStatPtr 0xc0 p StructStats once
check this p e heap

# Make structures indestructible
SBody 0x5c u16 l 10000 4,0 a
BODY_CHECK
PLAYER_ID_CHECK

# Building structures lasts too long. Make it faster!
# (The command center requires 500 build points.)
SBuild 0xca u16 l SMaxBuild 5,0 a
check this u16 g 2
PLAYER_ID_CHECK

SFuncPtr 0xd8 p StructFunct always
check this p e heap

dynmemend


# Adaptation
adapt_script adapt/warzone2100_adapt64.sh
adapt_required 1


# Looks like we have some static values here.
# Note: We can't adapt these, yet. Do discovery for them!
# (The game starts with power 1300.)
# These are addresses without PIE.

Power 0x1212180 i32 l 5000 A,X d
check this i32 g 10


# Cheaters don't like to be accused to be one. ;-)
Cheated 0xc91ba0 u8 g 0 B,X d
check this u8 l 2
DebugEn 0xcfae50 u8 l 1 C,X d


# The bools are easy to discover:
# 0. run the game and "scanmem"
# 1. start a new campaign
# 2. search for 0
# 3. activate cheats
# 4. use a cheat
# 5. search for 1
# 6. jump to step 1 until two matches are found

# real variable names in the game source:
# Cheated: Cheated, src/cheat.cpp
# DebugEn: bDoingDebugMappings, src/keymap.cpp
# Power: asPower[0].currentPower, src/power.cpp

# The currentPower is an i64 fixed point value with 32 bit before the
# point and 32 bit after it. We were lucky to find it as i32 this way.
# For ugtrain only these 32 bit count.

# DMaxBody: DROID::originalBody, src/droiddef.h
# DBody, SBody: BASE_OBJECT::body, src/basedef.h
# DKills: DROID::experience, src/droiddef.h
# DWeight: DROID::weight, src/droiddef.h
# DSpeed: DROID::baseSpeed, src/droiddef.h

# SType: STRUCTURE_STATS::type, src/structuredef.h
# SMaxBuild: STRUCTURE_STATS::buildPoints, src/structuredef.h
# FBuildTime: FACTORY::timeToBuild, src/structuredef.h
# FBuildPts: FACTORY::productionOutput, src/structuredef.h
# FPowerPts: FACTORY::powerAccrued, src/structuredef.h
# RResPts: RESEARCH_FACILITY::researchPoints, src/structuredef.h
# RPowerPts: RESEARCH_FACILITY::powerAccrued, src/structuredef.h
# SStatPtr: STRUCTURE::pStructureType, src/structuredef.h
# SBuild: STRUCTURE::currentBuildPts, src/structuredef.h
# SFuncPtr: STRUCTURE::pFunctionality, src/structuredef.h
